grammar org.xtext.example.mydsl.VideoGen with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate videoGen "http://www.xtext.org/example/mydsl/VideoGen"


VideoGeneratorModel:
	(information=VideoGenInformation)?
	'VideoGen' LEFT_BRACKET
	medias+=Media+
	RIGHT_BRACKET;

VideoGenInformation:
	{VideoGenInformation}
	('@author' authorName=STRING)
	('@version' version=STRING)?
	('@creation' creationDate=STRING)?;

Media : 	(MandatoryMedia | OptionalMedia | AlternativesMedia) 
;

MandatoryMedia : 'mandatory' description=MediaDescription;
OptionalMedia : 'optional' description=MediaDescription;
AlternativesMedia : 'alternatives' (id=ID)? LEFT_BRACKET medias+=MediaDescription+ RIGHT_BRACKET;

MediaDescription: (ImageDescription|VideoDescription);



ImageDescription : 'image' (imageid=ID)? location=STRING 
	(LEFT_BRACKET
	('toptext' top=STRING)
	('bottomtext' bottom=STRING)
	RIGHT_BRACKET)?
;

VideoDescription:
	'videoseq' (videoid=ID)? location=STRING
	(LEFT_BRACKET
	 ('duration' duration=INT)?
	 ('probability' probability=INT)? // percentage // PERCENTAGE 
	 // (note: probability does not make any sense for mandatory medias... 
	 // we can refactor the grammar or handle this situation with a model transformation) 
	 ('description' description=STRING)?
	 ('filter' filter=Filter)? // apply some filters to a video
	 ('text' text=VideoText)? // incrust a text into a video
	RIGHT_BRACKET)?
;

VideoText :
	LEFT_BRACKET
	'content' content=STRING
	'position' position=Position
	('color' color=STRING)?
	('size' size=INT)?
	RIGHT_BRACKET
;

Position :
	'TOP' | 'BOTTOM' | 'CENTER'
;



Filter : FlipFilter | NegateFilter | BlackWhiteFilter;

BlackWhiteFilter: {BlackWhiteFilter}
	'b&w'
;

NegateFilter: {NegateFilter}
	'negate'
;

FlipFilter:
	'flip' orientation=('h' | 'horizontal' | 'v' | 'vertical')
;

terminal LEFT_BRACKET: '{' ;
terminal RIGHT_BRACKET: '}';
//terminal PERCENTAGE returns ecore::EInt: ('1'..'9')('0'..'9')? | '100';
